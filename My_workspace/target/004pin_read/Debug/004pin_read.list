
004pin_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  000102f4  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  000102f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000152  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000a8  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000019  00000000  00000000  0001051e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000046f  00000000  00000000  0001152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c41  00000000  00000000  0001199b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000155dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  00015630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002d4 	.word	0x080002d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002d4 	.word	0x080002d4

080001d8 <main>:
   temp = temp | 0x08; // modify
   *pClkCtrlReg = temp; // write back
   */

   // below is a short-hand method for above 3 lines of code
   *pClkCtrlReg |= (1 << 3);
 80001d8:	4812      	ldr	r0, [pc, #72]	; (8000224 <main+0x4c>)
   *pClkCtrlReg |= (1 << 0);
   // 2. Configure the mode of the IO pin as output
   //a. clear the 24th and 25th bit positions (CLEAR)
   *pPortDModeReg &= ~(3 << 24);
 80001da:	4a13      	ldr	r2, [pc, #76]	; (8000228 <main+0x50>)
   *pPortAModeReg &= ~(3 << 0);

		while(1)
		{
	//Read the pin status of the pin PA0 (GPIOA input data Register)
	uint8_t pinA0Status = (uint8_t)(*pPortAInReg & 0x1); // Zero out all bits exept bit 0
 80001dc:	4913      	ldr	r1, [pc, #76]	; (800022c <main+0x54>)

		*pPortDOutReg |= (1 << 12);
	}
	else{
		// Turn off the LED
		*pPortDOutReg &= ~(1 << 12);
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <main+0x58>)
{
 80001e0:	b430      	push	{r4, r5}
   *pClkCtrlReg |= (1 << 3);
 80001e2:	6804      	ldr	r4, [r0, #0]
   *pPortAModeReg &= ~(3 << 0);
 80001e4:	4d13      	ldr	r5, [pc, #76]	; (8000234 <main+0x5c>)
   *pClkCtrlReg |= (1 << 3);
 80001e6:	f044 0408 	orr.w	r4, r4, #8
 80001ea:	6004      	str	r4, [r0, #0]
   *pClkCtrlReg |= (1 << 0);
 80001ec:	6804      	ldr	r4, [r0, #0]
 80001ee:	f044 0401 	orr.w	r4, r4, #1
 80001f2:	6004      	str	r4, [r0, #0]
   *pPortDModeReg &= ~(3 << 24);
 80001f4:	6810      	ldr	r0, [r2, #0]
 80001f6:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80001fa:	6010      	str	r0, [r2, #0]
   *pPortDModeReg |= (1 << 24);
 80001fc:	6810      	ldr	r0, [r2, #0]
 80001fe:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000202:	6010      	str	r0, [r2, #0]
   *pPortAModeReg &= ~(3 << 0);
 8000204:	682a      	ldr	r2, [r5, #0]
 8000206:	f022 0203 	bic.w	r2, r2, #3
 800020a:	602a      	str	r2, [r5, #0]
	uint8_t pinA0Status = (uint8_t)(*pPortAInReg & 0x1); // Zero out all bits exept bit 0
 800020c:	680a      	ldr	r2, [r1, #0]
	if (pinA0Status)
 800020e:	f012 0f01 	tst.w	r2, #1
		*pPortDOutReg |= (1 << 12);
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	bf14      	ite	ne
 8000216:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
		*pPortDOutReg &= ~(1 << 12);
 800021a:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	e7f4      	b.n	800020c <main+0x34>
 8000222:	bf00      	nop
 8000224:	40023830 	.word	0x40023830
 8000228:	40020c00 	.word	0x40020c00
 800022c:	40020010 	.word	0x40020010
 8000230:	40020c14 	.word	0x40020c14
 8000234:	40020000 	.word	0x40020000

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800023c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ffb5 	bl	80001d8 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	4d0d      	ldr	r5, [pc, #52]	; (80002c4 <__libc_init_array+0x38>)
 8000290:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000292:	1b64      	subs	r4, r4, r5
 8000294:	10a4      	asrs	r4, r4, #2
 8000296:	2600      	movs	r6, #0
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	4d0b      	ldr	r5, [pc, #44]	; (80002cc <__libc_init_array+0x40>)
 800029e:	4c0c      	ldr	r4, [pc, #48]	; (80002d0 <__libc_init_array+0x44>)
 80002a0:	f000 f818 	bl	80002d4 <_init>
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	2600      	movs	r6, #0
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
